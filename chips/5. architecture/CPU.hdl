// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Select either the instruction or ALU output
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=addr);

    // Select either A or M as ALU operand
    And(a=instruction[12], b=instruction[15], out=selm);
    Mux16(a=aregout, b=inM, sel=selm, out=memaddr);

    // Load A if this is A-instruction or C-instruction dest is A
    Not(in=instruction[15], out=ainstr);
    Or(a=instruction[5], b=ainstr, out=loada);
    ARegister(in=addr, load=loada, out=aregout, out[0..14]=addressM);

    // Load D if C-instruction and dest is D
    And(a=instruction[4], b=instruction[15], out=loadd);
    DRegister(in=aluout, load=loadd, out=dregout);

    // Fill up ALU with proper values
    ALU(x=dregout, y=memaddr, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, out=outM, zr=aluzr, ng=alung);

    // Write to M if C-instruction and dest is M
    And(a=instruction[3], b=instruction[15], out=writeM);

    // Jump if C-instruction and ALU out satisfies condition, otherwise increment
    Or(a=aluzr, b=alung, out=outpos0);
    Not(in=outpos0, out=outpos);
    And(a=instruction[0], b=outpos, out=jmp1);
    And(a=instruction[1], b=aluzr, out=jmp2);
    And(a=instruction[2], b=alung, out=jmp3);
    Or(a=jmp1, b=jmp2, out=jmp1jmp2);
    Or(a=jmp1jmp2, b=jmp3, out=jump);
    And(a=jump, b=instruction[15], out=trujmp);
    Not(in=trujmp, out=inc);

    // Update program counter
    PC(in=aregout, load=trujmp, reset=reset, inc=inc, out[0..14]=pc);
}